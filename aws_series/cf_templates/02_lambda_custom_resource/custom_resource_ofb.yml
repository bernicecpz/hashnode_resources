AWSTemplateFormatVersion: '2010-09-09'
Description: "This templates is to create a Lambda-backed Custom Resource. Use no dependencies, can work out of the box (ofb)"

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: 'Inputs for Lambda Function'
        Parameters:
          - FunctionName
          - MethodName
          - ModuleName
      - Label:
          default: 'Inputs for Custom Resource'
        Parameters:
          - Length

Parameters:
  FunctionName:
    Type: String
    Default: 'testfunction'
  MethodName:
    Description: 'Method name that will be executed by Lambda'
    Type: String
    Default: 'lambda_handler'
  ModuleName:
    Description: 'Using ZipFile will generate index.py file'
    Type: String
    Default: 'index'
  Length:
    Description: 'Input parameter for Custom Resource'
    Type: Number
    Default: 10

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: CustomResourceLambdaExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            Resource: "*"

  LambdaTestFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'Test Function to visualize Input Output'
      Runtime: python3.9
      FunctionName: !Ref FunctionName
      Role: !GetAtt LambdaExecutionRole.Arn
      # Have to name it Python_File_Name.Method_Name
      Handler: !Sub '${ModuleName}.${MethodName}'
      Code:
        ZipFile: |
          import json
          import random, string
          
          import urllib3
          http = urllib3.PoolManager()
          SUCCESS = "SUCCESS"
          FAILED = "FAILED"          

          # Take reference to cfnresponse.py
          def cfn_send(event, context, response_status, response_data, physical_resource_id=None, no_echo=False):
              response_url = event['ResponseURL']
              print(response_url)

              response_body = {}
              response_body['Status'] = response_status
              response_body['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
              response_body['PhysicalResourceId'] = physical_resource_id or context.log_stream_name
              response_body['StackId'] = event['StackId']
              response_body['RequestId'] = event['RequestId']
              response_body['LogicalResourceId'] = event['LogicalResourceId']
              response_body['NoEcho'] = no_echo
              response_body['Data'] = response_data

              json_response_body = json.dumps(response_body)

              print("Response body:\n" + json_response_body)

              headers = {
                  'content-type' : '',
                  'content-length' : str(len(json_response_body))
              }

              try:
                  response = http.request('PUT', response_url, headers=headers, body=json_response_body)
                  print("Status code: " + response.status)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): " + str(e))

          def generate_random_string(length):
              characters = string.ascii_letters + string.digits + string.punctuation
              random_string = ''.join(random.choice(characters) for index in range(length))
              return random_string

          def lambda_handler(event, context):
              try:
                
                # To see the responseData
                ## Note this will be printed in CloudWatch Logs
                responseData = {
                    'statusCode': 200,
                    'body': json.dumps(event)
                }

                string_length = int(event["ResourceProperties"]["Length"])
                final_output = str(generate_random_string(string_length))

                
                cfn_send(event, context, SUCCESS, responseData, final_output)
              except Exception as err:
                print(f'{err}')
                cfn_send(event, context, FAILED, responseData)
  
  GetRandomString:
    Type: Custom::LambdaTestFunction
    Properties:
      ServiceToken: !GetAtt LambdaTestFunction.Arn
      Region: !Ref "AWS::Region"
      Length: !Ref Length

Outputs:
  GetRandomString:
    Value: !Ref GetRandomString