AWSTemplateFormatVersion: "2010-09-09"

Description: Template generated by rain
Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - sit
      - qa
      - preprod
      - prod
    Description: Select the environment you are provisioning resources in
  WebName:
    Type: String
    Default: sp
    Description: Name of the React Web that you are setting the API Gateway for
  ApiName:
    Type: String
    Default: sp-web-dev
    Description: Naming convention - squadname-web-environment
  ApiDescription:
    Type: String
    Default: Create a API Gateway RestApi for serving Single Page Application
    Description: A short summary on the purpose of target API Gateway
  ApiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: web
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select the target VPC for VPC endpoint to reside in
  RoleName:
    Type: String
    Default: apigateway-to-s3-role
    Description: Name of IAM Role
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnets ID to use for API Gateway VPC endpoint

Resources:
  # S3 Bucket to host the Single Page Application Content
  S3BucketForSPA:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join
        - ""
        - - !Ref WebName
          - "-"
          - !Ref Environment
          - "-"
          - !Sub ${AWS::AccountId}
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: "app-name"  
          Value: !Ref WebName
        - Key: "env"
          Value: !Ref Environment

  
  S3BucketHTTPSPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: S3BucketHTTPSPolicy
        Version: "2012-10-17"
        Statement:
          # Https force policy
          - Effect: Deny
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref S3BucketForSPA
                - /*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
      Bucket: !Ref S3BucketForSPA

  # IAM role to have access to API Gateway & S3. APIGW can assume this role to access S3 resources
  ApigatewaytoS3Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: apigateway-to-s3-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Tags:
        - Key: app-name
          Value: apigateway
        - Key: env
          Value: !Ref Environment

  MyRestApi:
    DependsOn:
      - ApigatewaytoS3Role
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: !Ref ApiDescription
      BinaryMediaTypes:
        - font~1ttf
        - binary~1octet-stream
        - image~1*
      Body:
        swagger: "2.0"
        info:
          title: !Ref ApiName
        schemes:
        - "https"
        paths:
          /{fe-target}:
            get:
              parameters:
              - name: "fe-target"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    X-Frame-Options:
                      type: "string"
                    Strict-Transport-Security:
                      type: "string"
                    Cache-Control:
                      type: "string"
                    Pragma:
                      type: "string"
                    Content-Length:
                      type: "string"
                    Timestamp:
                      type: "string"
                    Content-Type:
                      type: "string"
                "400":
                  description: "400 response"
                "500":
                  description: "500 response"
                "404":
                  description: "404 response"
              x-amazon-apigateway-integration:
                credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/${RoleName}"
                httpMethod: "GET"
                uri: 
                  !Join
                    - ""
                    - - "arn:aws:apigateway:ap-southeast-1:s3:path/"
                      - !Ref WebName
                      - "-"
                      - !Ref Environment
                      - "-"
                      - !Sub ${AWS::AccountId}
                      - "/{fe-target}/index.html"
                responses:
                  "4\\d{2}":
                    statusCode: "400"
                    responseTemplates:
                      text/plain: "#set($inputRoot = $input.path('$'))\n404 Error: Bad Request"
                  "404":
                    statusCode: "404"
                    responseTemplates:
                      text/plain: "#set($inputRoot = $input.path('$'))\n404 Error: Page not\
                        \ found"
                  "5\\d{2}":
                    statusCode: "500"
                    responseTemplates:
                      text/plain: "#set($inputRoot = $input.path('$'))\r\n500 Error: Internal\
                        \ Server Error"
                  "2\\d{2}":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Cache-Control: "'private, max-age=900'"
                      method.response.header.X-Frame-Options: "'deny'"
                      method.response.header.Content-Type: "integration.response.header.Content-Type"
                      method.response.header.Strict-Transport-Security: "'max-age=31536000\
                        \ ; includeSubDomains'"
                      method.response.header.Content-Length: "integration.response.header.Content-Length"
                      method.response.header.Timestamp: "integration.response.header.Date"
                requestParameters:
                  integration.request.path.fe-target: "method.request.path.fe-target"
                passthroughBehavior: "when_no_match"
                cacheNamespace: "lt8t5k"
                cacheKeyParameters:
                - "method.request.path.fe-target"
                type: "aws"
          /static/{subfolder+}:
            get:
              parameters:
              - name: "subfolder"
                in: "path"
                required: true
                type: "string"
              - name: "fe-target"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    X-Frame-Options:
                      type: "string"
                    Strict-Transport-Security:
                      type: "string"
                    Cache-Control:
                      type: "string"
                    Content-Length:
                      type: "string"
                    Timestamp:
                      type: "string"
                    Content-Type:
                      type: "string"
                "400":
                  description: "400 response"
                "500":
                  description: "500 response"
                "404":
                  description: "404 response"
              x-amazon-apigateway-integration:
                credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/${RoleName}"
                httpMethod: "GET"
                uri: 
                  !Join
                    - ""
                    - - "arn:aws:apigateway:ap-southeast-1:s3:path/"
                      - !Ref WebName
                      - "-"
                      - !Ref Environment
                      - "-"
                      - !Sub ${AWS::AccountId}
                      - "/{fe-target}/static/{subfolder}"
                responses:
                  "4\\d{2}":
                    statusCode: "400"
                    responseTemplates:
                      text/plain: "#set($inputRoot = $input.path('$'))\n404 Error: Bad Request"
                  "404":
                    statusCode: "404"
                    responseTemplates:
                      text/plain: "#set($inputRoot = $input.path('$'))\n404 Error: Page not\
                        \ found"
                  "5\\d{2}":
                    statusCode: "500"
                    responseTemplates:
                      text/plain: "#set($inputRoot = $input.path('$'))\r\n500 Error: Internal\
                        \ Server Error"
                  "2\\d{2}":
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Cache-Control: "'private, max-age=900'"
                      method.response.header.X-Frame-Options: "'deny'"
                      method.response.header.Content-Type: "integration.response.header.Content-Type"
                      method.response.header.Strict-Transport-Security: "'max-age=31536000\
                        \ ; includeSubDomains'"
                      method.response.header.Content-Length: "integration.response.header.Content-Length"
                      method.response.header.Timestamp: "integration.response.header.Date"
                requestParameters:
                  integration.request.path.subfolder: "method.request.path.subfolder"
                  integration.request.path.fe-target: "method.request.path.fe-target"
                passthroughBehavior: "when_no_match"
                cacheNamespace: "lt8t5k"
                cacheKeyParameters:
                - "method.request.path.subfolder"
                type: "aws"
        x-amazon-apigateway-binary-media-types:
        - "image/*"
        - "font/ttf"
        - "binary/octet-stream"



Outputs:
  MyRestApiRestApiId:
    Value: !GetAtt MyRestApi.RestApiId

  MyRestApiRootResourceId:
    Value: !GetAtt MyRestApi.RootResourceId

