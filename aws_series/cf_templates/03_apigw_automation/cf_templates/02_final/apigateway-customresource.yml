AWSTemplateFormatVersion: '2010-09-09'
Description: "Understanding APIGateway Setup and use of lambda backed resources"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "REST API JSON File and S3 Bucket"
        Parameters:
          - APIJsonS3Bucket
          - APIJsonS3BucketArn
          - RestApiFilename
          - RestApiFileVersion
          
      - Label:
          default: "ApiGateway Configuration"
        Parameters:
          - EndpointConfigurationType

      - Label:
          default: "Lambda Deployment Info Management"
        Parameters:
          - SemanticVersion
          - StageNameToUpdate
          - MethodName
          - ModuleName

Parameters:

  APIJsonS3Bucket:
    Type: String
    Description: "S3 Bucket name containing the REST API JSON file"

  APIJsonS3BucketArn:
    Type: String
    Description: "ARN of S3 Bucket"

  MethodName:
    Description: 'Method name that will be executed by Lambda'
    Type: String

  
  ModuleName:
    Description: 'Using ZipFile will generate index.py file'
    Type: String


  RestApiFilename:
    Type: String
    Description: "Name of REST API JSON file"


  RestApiFileVersion:
    Type: String
    Description: "Version ID of REST API JSON file in S3 Bucket"


  EndpointConfigurationType:
    Type: String
    Description: "A list of endpoint types of an API or custome domain name"

    AllowedValues:
      - "EDGE"
      - "REGIONAL"
      - "PRIVATE"

  SemanticVersion:
    Type: String
    Description: "To indicate the semantic version for the API"


  StageNameToUpdate:
    Type: String

    Description: "To indicate recent stage that was deployed to. Indicate NA if you do not want to deploy the API for the changeset"

Conditions:
  CreatePrivateRestApiGateway: !Equals [!Ref EndpointConfigurationType, 'PRIVATE']
  CreateApiGateway: !Not [!Equals [!Ref EndpointConfigurationType, 'PRIVATE']]

Resources:
  MyApiGateway:
    Condition: CreateApiGateway
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "My ApiGateway"
      Description: "Test API Gateway, deploy with CF"
      Mode: overwrite
      BodyS3Location:
        Bucket: !Sub "${APIJsonS3Bucket}"
        Key: !Sub "${RestApiFilename}"
        Version: !Sub "${RestApiFileVersion}"
      EndpointConfiguration:
        Types:
          - !Sub "${EndpointConfigurationType}"

  MyPrivateRestApiGateway:
    Condition: CreatePrivateRestApiGateway
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "My ApiGateway"
      Description: "Test API Gateway, deploy with CF"
      Mode: overwrite
      BodyS3Location:
        Bucket: !Sub "${APIJsonS3Bucket}"
        Key: !Sub "${RestApiFilename}"
        Version: !Sub "${RestApiFileVersion}"
      EndpointConfiguration:
        Types:
          - !Sub "${EndpointConfigurationType}"
      Policy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 'execute-api:Invoke'
            Resource: '*'

  #TODO: Create Lambda backed Custom Resource
  ## Takes in Stage Name, Takes in RestApiId
  ## Return response output to be decided
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: CustomResourceLambdaExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - apigateway:POST
            - apigateway:GET
            - apigateway:PUT
            - apigateway:PATCH
            Resource: "*"
              
  ApiGWDeploymentFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: 'To deploy latest api for each new version id of API JSON file'
      FunctionName: 'DeployAPIGW'
      Runtime: python3.9
      Handler: !Sub "${ModuleName}.${MethodName}"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json, urllib3, boto3

          http = urllib3.PoolManager()
          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          # Take reference to cfnresponse.py
          def cfn_send(event, context, response_status, response_data, physical_resource_id=None, no_echo=False):
              response_url = event['ResponseURL']
              print(response_url)

              response_body = {}
              response_body['Status'] = response_status
              response_body['Reason'] = 'See the details in CloudWatch Log Stream: ' + context.log_stream_name
              response_body['PhysicalResourceId'] = physical_resource_id or context.log_stream_name
              response_body['StackId'] = event['StackId']
              response_body['RequestId'] = event['RequestId']
              response_body['LogicalResourceId'] = event['LogicalResourceId']
              response_body['NoEcho'] = no_echo
              

              if bool(response_data):
                response_body['Data'] = response_data
                response_body['DeploymentId'] = response_data['id']
                response_body['DeploymentDescription'] = response_data['description']
                response_body['DeploymentDate'] = str(response_data['createdDate'])


              json_response_body = json.dumps(response_body,sort_keys=True, default=str)

              print("Response body:\n" + json_response_body)

              headers = {
                  'content-type' : '',
                  'content-length' : str(len(json_response_body))
              }

              try:
                  response = http.request('PUT', response_url, headers=headers, body=json_response_body)
                  print("Status code: " + response.status)
              except Exception as e:
                  print("send(..) failed executing requests.put(..): " + str(e))

          def lambda_handler(event, context):
            response = ""
            try:
              apigw = boto3.client('apigateway')

              rest_api_id = event["ResourceProperties"]["RestApiId"]
              deployment_description = event["ResourceProperties"]["DeployDesc"]
              stage_name = event["ResourceProperties"]["StageName"]
              semantic_versioning = event["ResourceProperties"]["SemanticVersion"]
              print(f'rest api id = {rest_api_id}, desc = {deployment_description} , stage_name = {stage_name}')


              if stage_name == 'NA':
                # Don't deploy the API that's updated in stage
                cfn_send(event, context, SUCCESS, {})
              else:

                # Deploy API
                response = apigw.create_deployment(
                    restApiId=rest_api_id,
                    description=deployment_description,
                    stageName=stage_name
                )
                
                apigw.create_documentation_version(
                  restApiId=rest_api_id,
                  documentationVersion=semantic_versioning,
                  stageName=stage_name,
                  description=deployment_description
                )

                cfn_send(event, context, SUCCESS, response)
            except Exception as err:
              print(f'{err}')
              cfn_send(event, context, FAILED, response)



  DeployApi:
    Type: Custom::ApiGWDeploymentFunction
    Properties:
      ServiceToken: !GetAtt ApiGWDeploymentFunction.Arn
      RestApiId: !If [ CreateApiGateway, !Ref MyApiGateway, !Ref MyPrivateRestApiGateway]
      DeployDesc: !Sub "Deploy API file ${RestApiFilename}, version id ${RestApiFileVersion}, semantic versioning ${SemanticVersion}"
      StageName: !Ref StageNameToUpdate
      SemanticVersion: !Ref SemanticVersion

Outputs:
  LatestRestApiId:
    Value: !If [ CreateApiGateway, !Ref MyApiGateway, !Ref MyPrivateRestApiGateway]
  
  